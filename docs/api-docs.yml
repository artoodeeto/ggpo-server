openapi: 3.0.2
info:
  version: '1.0.0'
  title: 'GOOD GAME PEACE OUT!'
  description: 'FOR GAMERS BY GAMERS'

servers:
  - description: Development Server
    url: 'http://localhost:8000/api/v1'

tags:
  - name: Users
    description: Users routes
  - name: Posts
    description: Posts routes

security:
  - bearerAuth: [bearer <TOKEN>]

paths:
  # ! ++====================================== USERS PATH START ==================================== ++
  /signup:
    post:
      security:
        - {}
      tags:
        - Users
      summary: User signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: success signing up
          content:
            application/json:
              schema:
                $ref: '#/components/responses/loginAndSignupResponse'
        '400':
          description: payload is incorrect (email is not in correct format)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      properties:
                        value:
                          type: string
                        property:
                          type: string
                        children:
                          type: array
                          items:
                            type: string
                        constraints:
                          type: object
                          example:
                            'isEmail': 'email must be an email'

  /login:
    post:
      security:
        - {}
      tags:
        - Users
      summary: User signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: success login
          content:
            application/json:
              schema:
                $ref: '#/components/responses/loginAndSignupResponse'
        '400':
          description: failed login
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    oneOf:
                      - example: incorrect credentials
                      - example: no user with EMAIL
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a user
      operationId: readUser
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      id:
                        type: number
                        example: 1
                      username:
                        type: string
                        example: 'username'
                      email:
                        type: string
                        example: 'username@gmail.com'
        '404':
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      name:
                        type: string
                        example: 'EntityNotFound'
                      message:
                        type: string
                        example: 'Could not find any entity of type User matching: 2'
    put:
      tags:
        - Users
      summary: Get a user
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        '200':
          description: NOT YET DONE BISSH
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/couldNotFindUser'
    delete:
      tags:
        - Users
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      deleteAt:
                        type: string
                        format: date-time
                        description: date in milliseconds
                  payload:
                    type: object

        '404':
          $ref: '#/components/responses/couldNotFindUser'
  /users/query/some/users:
    get:
      tags:
        - Users
      summary: query some users
      operationId: getSomeUsers
      parameters:
        - $ref: '#/components/parameters/offsetQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      users:
                        type: array
                        example:
                          - id: 1
                            username: 'username1'
                            email: 'username1@gmail.com'
                          - id: 2
                            username: 'username2'
                            email: 'username2@gmail.com'
        '404':
          $ref: '#/components/responses/400ErrorResponse'

  # ! ++====================================== USERS PATH END ==================================== ++
  #
  #
  #
  # ! ++====================================== POST PATH START ==================================== ++
  /posts:
    post:
      tags:
        - Posts
      summary: Creating new posts
      operationId: createPost
      requestBody:
        $ref: '#/components/requestBodies/createUpdatePost'
      responses:
        '200':
          $ref: '#/components/responses/postResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/404ErrorResponse'
  /posts/{id}:
    get:
      tags:
        - Posts
      summary: get a posts
      operationId: readPost
      parameters:
        - $ref: '#/components/parameters/idPath'
      requestBody:
        $ref: '#'
      responses:
        '200':
          $ref: '#/components/responses/postResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/404ErrorResponse'
    put:
      tags:
        - Posts
      summary: edit a posts
      operationId: updatePost
      parameters:
        - $ref: '#/components/parameters/idPath'
      requestBody:
        $ref: '#/components/requestBodies/createUpdatePost'
      responses:
        '200':
          $ref: '#/components/responses/postResponse'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/404ErrorResponse'
    delete:
      tags:
        - Posts
      summary: delete a posts
      operationId: deletePost
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        '200':
          description: success response for creating a post
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'success'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/404ErrorResponse'
  /posts/query/some/posts:
    get:
      tags:
        - Posts
      summary: get some posts with limit and offset
      operationId: getSomePost
      parameters:
        - $ref: '#/components/parameters/offsetQuery'
        - $ref: '#/components/parameters/limitQuery'
      responses:
        '200':
          description: posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      post:
                        type: array
                        example:
                          - id: 1
                            title: 'title'
                            body: 'body'
                            createdAt: '2020-02-27T04:16:50.000Z'
                          - id: 2
                            title: 'title'
                            body: 'body'
                            createdAt: '2020-02-27T04:16:50.000Z'
        '401':
          $ref: '#/components/responses/unauthorized'
        '404':
          $ref: '#/components/responses/404ErrorResponse'

  # ! ++====================================== POST PATH END ==================================== ++

# ++====================================== COMPONENTS PATH ====================================++
components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - email
        - password
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    Post:
      type: object
      required:
        - id
        - title
        - body
        - user
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        user:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ! =============================== REQUEST BODY START ===============================
  requestBodies:
    # ! =============================== USER START ===============================
    UserSignup:
      content:
        application/json:
          schema:
            example:
              username: theUsername
              email: theUseremail@email.com
              password: theUserPassword
      description: User information in hash form
    # ! =============================== USER END ===============================
    # ! =============================== POST START ===============================
    createUpdatePost:
      description: request body to create a new post
      required: true
      content:
        application/json:
          schema:
            properties:
              title:
                type: string
                example: 'the title'
              body:
                type: string
                example: 'the body'

    # ! =============================== USER END ===============================
  # ! =============================== REQUEST BODY START ===============================
  # ! =============================== RESPONSE START ===============================
  responses:
    loginAndSignupResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            issueDate:
              type: string
            expToken:
              type: string
          example:
            issueDate: '1581049918568'
            expToken: '10800000'
        payload:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: integer
                username:
                  type: string
                email:
                  type: string
              example:
                id: 1
                username: nocap
                email: nocap@gmail.com
            token:
              type: string
              example: JWT
    couldNotFindUser:
      description: bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  name:
                    type: string
                    example: 'EntityNotFound'
                  message:
                    type: string
                    example: 'Could not find any entity of type User matching: 2'
    postResponse:
      description: success response for creating a post
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                type: object
              payload:
                type: object
                properties:
                  post:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: 'the title'
                      body:
                        type: string
                        example: 'the body'
    unauthorized:
      description: User has no token or not login
    404ErrorResponse:
      description: Error
    400ErrorResponse:
      description: Error
  # ! =============================== RESPONSE END ===============================
  parameters:
    idPath:
      in: path
      name: id
      description: ID of a resource
      required: true
      schema:
        type: integer
    offsetQuery:
      in: query
      name: offset
      description: number of rows to skip
      required: true
      schema:
        type: integer
    limitQuery:
      in: query
      name: limit
      description: number of rows to be returned
      required: true
      schema:
        type: integer
        default: 10

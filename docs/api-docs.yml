openapi: 3.0.2
info:
  version: "1.0.0"
  title: "GOOD GAME PEACE OUT!"
  description: "FOR GAMERS BY GAMERS"

servers:
  - description: Development Server
    url: "http://localhost:8000/api/v1"

tags:
  - name: Users
    description: Users Routes
  - name: Posts
    description: Posts Routes
  - name: GameGroup
    description: GameGroup Routes

security:
  - bearerAuth: [bearer <TOKEN>]

paths:
  # ! ++====================================== USERS PATH START ==================================== ++
  /signup:
    post:
      security:
        - {}
      tags:
        - Users
      summary: User signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: success signing up
          content:
            application/json:
              schema:
                $ref: "#/components/responses/loginAndSignupResponse"
        "400":
          description: validation payload failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    example: "ValidationError"
                  errorMessage:
                    properties:
                      isEmail:
                        type: string
                        example: "email must be an email"
                      matches:
                        type: string
                        example: "password must match /[0-9]/ regular expression"
                      minLength:
                        type: string
                        example: "password must be longer than or equal to 8 characters"

  /login:
    post:
      security:
        - {}
      tags:
        - Users
      summary: User signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: success login
          content:
            application/json:
              schema:
                $ref: "#/components/responses/loginAndSignupResponse"
        "400":
          description: failed login
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    example: "CLIENT"
                  errorMessage:
                    properties:
                      misMatchPassword:
                        type: string
                        example: "Password does not match the email"
                      noEmail:
                        type: string
                        example: "Incorrect Email"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a user
      operationId: readUser
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      id:
                        type: number
                        example: 1
                      username:
                        type: string
                        example: "username"
                      email:
                        type: string
                        example: "username@gmail.com"
        "404":
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "EntityNotFound"
                      message:
                        type: string
                        example: "Could not find any entity of type User matching: 2"
    put:
      tags:
        - Users
      summary: Get a user
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          description: User update
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      updatedAt:
                        type: string
                        example: "2020-05-24T22:45:16.000Z"
                      createdAt:
                        type: string
                        example: "2020-05-24T22:45:16.000Z"
                      deteledAt:
                        type: string
                        example: "2020-05-24T22:45:16.000Z"
                  payload:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: number
                            example: 1
                          username:
                            type: string
                            example: "username"
                          email:
                            type: string
                            example: "username@gmail.com"
        # "404":
        #   $ref: "#/components/responses/couldNotFindUser"
        "401":
          $ref: "#/components/responses/unauthorized"
    delete:
      tags:
        - Users
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      deleteAt:
                        type: string
                        format: date-time
                        description: date in milliseconds
                  payload:
                    type: object

        # "404":
        #   $ref: "#/components/responses/couldNotFindUser"
        "401":
          $ref: "#/components/responses/unauthorized"
  /users/query/some/users:
    get:
      tags:
        - Users
      summary: query some users
      operationId: getSomeUsers
      parameters:
        - $ref: "#/components/parameters/offsetQuery"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      users:
                        type: array
                        example:
                          - id: 1
                            username: "username1"
                            email: "username1@gmail.com"
                          - id: 2
                            username: "username2"
                            email: "username2@gmail.com"
        "404":
          $ref: "#/components/responses/400ErrorResponse"

  # ! ++====================================== USERS PATH END ==================================== ++
  #
  #
  #
  # ! ++====================================== POST PATH START ==================================== ++
  /posts:
    post:
      tags:
        - Posts
      summary: Creating new posts
      operationId: createPost
      requestBody:
        $ref: "#/components/requestBodies/createUpdatePost"
      responses:
        "200":
          $ref: "#/components/responses/postResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
  /posts/{id}:
    get:
      tags:
        - Posts
      summary: get a posts
      operationId: readPost
      parameters:
        - $ref: "#/components/parameters/idPath"
      requestBody:
        $ref: "#"
      responses:
        "200":
          $ref: "#/components/responses/postResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
    put:
      tags:
        - Posts
      summary: edit a posts
      operationId: updatePost
      parameters:
        - $ref: "#/components/parameters/idPath"
      requestBody:
        $ref: "#/components/requestBodies/createUpdatePost"
      responses:
        "200":
          $ref: "#/components/responses/postResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        # "404":
        #   $ref: "#/components/responses/404ErrorResponse"
    delete:
      tags:
        - Posts
      summary: delete a posts
      operationId: deletePost
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          description: success response for creating a post
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "success"
        "401":
          $ref: "#/components/responses/unauthorized"
        # "404":
        #   $ref: "#/components/responses/404ErrorResponse"
  /posts/query/some/posts:
    get:
      tags:
        - Posts
      summary: get some posts with limit and offset
      operationId: getSomePost
      parameters:
        - $ref: "#/components/parameters/offsetQuery"
        - $ref: "#/components/parameters/limitQuery"
      responses:
        "200":
          description: posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      post:
                        type: array
                        example:
                          - id: 1
                            title: "title"
                            body: "body"
                            createdAt: "2020-02-27T04:16:50.000Z"
                            user:
                              id: number
                              username: string
                              email: string
                          - id: 2
                            title: "title"
                            body: "body"
                            createdAt: "2020-02-27T04:16:50.000Z"
                            user:
                              id: number
                              username: string
                              email: string
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"

  # ! ++====================================== POST PATH END ==================================== ++
  #
  #
  #
  #
  # ! ++====================================== GAMEGROUP PATH START ==================================== ++
  /game_groups:
    post:
      tags:
        - GameGroup
      summary: Creating new posts
      operationId: createGameGroup
      requestBody:
        $ref: "#/components/requestBodies/createAndUpdateGameGroup"
      responses:
        "200":
          $ref: "#/components/responses/createGGResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
  /game_groups/{id}:
    get:
      tags:
        - GameGroup
      summary: Read a game group with user from TOKEN
      parameters:
        - $ref: "#/components/parameters/idPath"
      operationId: readGameGroup
      responses:
        "200":
          description: response reading a gamegroup with users
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      isFollower:
                        description: TOKEN will be checked if the current user is following the current gamegroup
                        type: boolean
                        example: true
                      gameGroup:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: "DOTA2"
                          description:
                            type: string
                            example: "a short description of the game"
                          createdAt:
                            type: string
                            example: "2020-04-14T03:42:16.000Z"
                          usersGameGroup:
                            type: array
                            example:
                              - id: 1 # dont mind the ID here this from the join table
                                user:
                                  id: 1
                                  username: "username1"
                                  email: "username1@gmail.com"
                              - id: 2 # dont mind the ID here this from the join table
                                user:
                                  id: 2
                                  username: "username2"
                                  email: "username2@gmail.com"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
    put:
      tags:
        - GameGroup
      summary: Update a gameGroup
      parameters:
        - $ref: "#/components/parameters/idPath"
      operationId: updateGameGroup
      requestBody:
        $ref: "#/components/requestBodies/createAndUpdateGameGroup"
      responses:
        "200":
          $ref: "#/components/responses/createGGResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
    delete:
      tags:
        - GameGroup
      summary: Delete a gameGroup
      parameters:
        - $ref: "#/components/parameters/idPath"
      operationId: deleteGameGroup
      responses:
        "200":
          $ref: "#/components/responses/createGGResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
  /game_groups/follow/{id}:
    put:
      tags:
        - GameGroup
      summary: current user follows a gamegroup
      parameters:
        - $ref: "#/components/parameters/idPath"
      operationId: followGameGroup
      responses:
        "200":
          $ref: "#/components/responses/followUnfllowResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
  /game_groups/unfollow/{id}:
    delete:
      tags:
        - GameGroup
      summary: current user unfollows a gamegroup
      parameters:
        - $ref: "#/components/parameters/idPath"
      operationId: unfollowGameGroup
      responses:
        "200":
          $ref: "#/components/responses/followUnfllowResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"

  # ! ++====================================== GAMEGROUP PATH END ==================================== ++

# ++====================================== COMPONENTS PATH ====================================++
components:
  schemas:
    User:
      description: USER can have many POST and GAMEGROUP through USERSGAMEGROUP
      type: object
      required:
        - id
        - username
        - email
        - password
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    Post:
      description: A POST can have many users, 1:M relationship with USERS
      type: object
      required:
        - id
        - title
        - body
        - user
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        user:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    GameGroup:
      description: GameGroup can have many users through USERSGAMEGROUP
      type: object
      required:
        - id
        - title
        - description
      properties:
        id:
          type: integer
        title:
          type: integer
        description:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    UsersGameGroup:
      description: a join table for USER and GAMEGROUP, Relationship N:M
      type: object
      required:
        - id
        - userId
        - gamegroupId
      properties:
        id:
          type: integer
        userId:
          type: integer
        gameGroupId:
          type: integer

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ! =============================== REQUEST BODY START ===============================
  requestBodies:
    # ! =============================== USER START ===============================
    UserSignup:
      content:
        application/json:
          schema:
            example:
              username: theUsername
              email: theUseremail@email.com
              password: theUserPassword
      description: User information in hash form
    # ! =============================== USER END ===============================
    # ! =============================== POST START ===============================
    createUpdatePost:
      description: request body to create a new post
      required: true
      content:
        application/json:
          schema:
            properties:
              title:
                type: string
                example: "the title"
              body:
                type: string
                example: "the body"

    # ! =============================== USER END ===============================
    # ! =============================== POST START ===============================
    createAndUpdateGameGroup:
      description: request to create or update a new GameGroup
      required: true
      content:
        application/json:
          schema:
            properties:
              title:
                type: string
                example: "DOTA2"
              description:
                type: string
                example: "a short description of the game"

    # ! =============================== USER END ===============================
  # ! =============================== REQUEST BODY END ===============================
  # ! =============================== RESPONSE START ===============================
  responses:
    loginAndSignupResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            issueDate:
              type: string
            expToken:
              type: string
          example:
            issueDate: "1581049918568"
            expToken: "10800000"
        payload:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: integer
                username:
                  type: string
                email:
                  type: string
              example:
                id: 1
                username: nocap
                email: nocap@gmail.com
            token:
              type: string
              example: JWT
    couldNotFindUser:
      description: bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  name:
                    type: string
                    example: "EntityNotFound"
                  message:
                    type: string
                    example: "Could not find any entity of type User matching: 2"
    postResponse:
      description: success response for creating a post
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                type: object
              payload:
                type: object
                properties:
                  post:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: "the title"
                      body:
                        type: string
                        example: "the body"
    createGGResponse:
      description: success response for creating a new game group
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                type: object
                properties:
                  createdAt:
                    type: string
                    example: "2020-04-14T03:50:47.000Z"
                  updatedAt:
                    type: string
                    example: "2020-04-14T03:50:47.000Z"
              payload:
                type: object
                properties:
                  gamegroup:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: "DOTA2"
                      description:
                        type: string
                        example: "a short description of the game"
    followUnfllowResponse:
      description: success response for following and unfollow a new game group
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                type: object
              payload:
                type: object
                properties:
                  gamegroup:
                    type: string
                    example: "success"
    unauthorized:
      description: User unauthorized (no token, tampered token, accessing resource thats not owned by current user)
    404ErrorResponse:
      description: Error
    400ErrorResponse:
      description: Error
  # ! =============================== RESPONSE END ===============================
  parameters:
    idPath:
      in: path
      name: id
      description: ID of a resource
      required: true
      schema:
        type: integer
    offsetQuery:
      in: query
      name: offset
      description: number of rows to skip
      required: true
      schema:
        type: integer
    limitQuery:
      in: query
      name: limit
      description: number of rows to be returned
      required: true
      schema:
        type: integer
        default: 10

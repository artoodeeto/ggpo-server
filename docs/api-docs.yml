openapi: 3.0.2
info:
  version: "1.0.0"
  title: "GOOD GAME PEACE OUT!"
  description: "FOR GAMERS BY GAMERS"

servers:
  - description: Development Server
    url: "http://localhost:8000/api/v1"

tags:
  - name: Users
    description: Users routes
  - name: Posts
    description: Posts routes

security:
  - bearerAuth: [bearer <TOKEN>]

paths:
  # ! ++====================================== USERS PATH START ==================================== ++
  /users:
    get:
      tags:
        - Users
      summary: Returns list of users in ORDER by id ASC.
      description: Use this path if you need to get users. Using query params offset=0
      parameters:
        - in: header
          name: Authorization
          required: true
          description: header bearer token schema
          schema:
            type: string
            format: bearer TOKEN
        - in: query
          name: offset
          schema:
            type: integer
          description: number of users to be skipped
      responses:
        "200":
          description: Success response will give you a list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      users:
                        type: array
                        example:
                          - id: 1
                            username: user1
                            email: user1@gmail.com
                          - id: 2
                            username: user2
                            email: user2@gmail.com
        "400":
          description: error cant find all users
          content:
            application/json:
              schema:
                type: object
                example:
                  error: "error message"
        "401":
          description: If token is expired or empty
          content:
            text/plain:
              example: "UnauthorizedError: Error message here"

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Gets a specific using user ID
      parameters:
        - in: header
          name: Authorization
          required: true
          description: header bearer token schema
          schema:
            type: string
            format: bearer TOKEN
        - name: userId
          in: path
          description: user that needs to be fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: success query user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/metaAndPayload"
        "400":
          description: Invalid user Id
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      name:
                        type: string
                      message:
                        type: string
        "401":
          description: If token is expired or empty
          content:
            text/plain:
              example: "UnauthorizedError: Error message here"

  /users/signup:
    post:
      security:
        - {}
      tags:
        - Users
      summary: User signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: success sigining up
          content:
            application/json:
              schema:
                $ref: "#/components/responses/loginAndSignupResponse"
        "400":
          description: payload is incorrect (email is not in correct format)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      properties:
                        value:
                          type: string
                        property:
                          type: string
                        children:
                          items:
                            children: null
                        constraints:
                          type: object
                          example:
                            "isEmail": "email must be an email"
  /users/login:
    post:
      security:
        - {}
      tags:
        - Users
      summary: User signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: success login
          content:
            application/json:
              schema:
                $ref: "#/components/responses/loginAndSignupResponse"
        "400":
          description: failed login
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    oneOf:
                      - example: incorrect credentials
                      - example: no user with EMAIL

  /users/delete/{userId}:
    delete:
      tags:
        - Users
      summary: Remove user
      parameters:
        - in: header
          name: Authorization
          required: true
          description: header bearer token schema
          schema:
            type: string
            format: bearer TOKEN
        - name: userId
          in: path
          description: user that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: success deleting user
          content:
            application/json:
              schema:
                type: object
                properties:
                  payload:
                    type: object
                    properties:
                      email:
                        type: string
                      username:
                        type: string
        "404":
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      name:
                        type: string
                      message:
                        type: string
                    example:
                      name: EntityNotFound
                      message: 'Could not find any entity of type "User" matching: "123"'
  # ! ++====================================== USERS PATH END ==================================== ++
  #
  #
  #
  # ! ++====================================== POST PATH START ==================================== ++
  /posts:
    post:
      tags:
        - Posts
      summary: Creating new posts
      operationId: createPost
      requestBody:
        $ref: "#/components/requestBodies/createUpdatePost"
      responses:
        "200":
          $ref: "#/components/responses/postResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
  /posts/{id}:
    get:
      tags:
        - Posts
      summary: get a posts
      operationId: readPost
      parameters:
        - $ref: "#/components/parameters/idPath"
      requestBody:
        $ref: "#"
      responses:
        "200":
          $ref: "#/components/responses/postResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
    put:
      tags:
        - Posts
      summary: edit a posts
      operationId: updatePost
      parameters:
        - $ref: "#/components/parameters/idPath"
      requestBody:
        $ref: "#/components/requestBodies/createUpdatePost"
      responses:
        "200":
          $ref: "#/components/responses/postResponse"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
    delete:
      tags:
        - Posts
      summary: delete a posts
      operationId: deletePost
      parameters:
        - $ref: "#/components/parameters/idPath"
      responses:
        "200":
          description: success response for creating a post
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "success"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"
  /paginated/query?offset=2&limit=5:
    get:
      tags:
        - Posts
      summary: get some posts with limit and offset
      operationId: getSomePost
      parameters:
        - $ref: "#/components/parameters/offsetQuery"
        - $ref: "#/components/parameters/limitQuery"
      responses:
        "200":
          description: posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                  payload:
                    type: object
                    properties:
                      post:
                        type: array
                        example:
                          - id: 1
                            title: "title"
                            body: "body"
                            createdAt: "2020-02-27T04:16:50.000Z"
                          - id: 2
                            title: "title"
                            body: "body"
                            createdAt: "2020-02-27T04:16:50.000Z"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/404ErrorResponse"

  # ! ++====================================== POST PATH END ==================================== ++

# ++====================================== COMPONENTS PATH ====================================++
components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - email
        - password
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Post:
      type: object
      properties:
        meta:
          type: object
        payload:
          type: object
          properties:
            post:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                title:
                  type: string
                  example: "the title"
                body:
                  type: string
                  example: "the body"

      required:
        - null
    metaAndPayload:
      type: object
      properties:
        meta:
          type: object
        payload:
          type: object
          properties:
            username:
              type: string
            email:
              type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ! =============================== REQUEST BODY START ===============================
  requestBodies:
    # ! =============================== USER START ===============================
    UserSignup:
      content:
        application/json:
          schema:
            example:
              username: theUsername
              email: theUseremail@email.com
              password: theUserPassword
      description: User information in hash form
    # ! =============================== USER END ===============================
    # ! =============================== POST START ===============================
    createUpdatePost:
      description: request body to create a new post
      required: true
      content:
        application/json:
          schema:
            properties:
              title:
                type: string
                example: "the title"
              body:
                type: string
                example: "the body"

    # ! =============================== USER END ===============================
  # ! =============================== REQUEST BODY START ===============================
  # ! =============================== RESPONSE START ===============================
  responses:
    loginAndSignupResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            issueDate:
              type: string
            expToken:
              type: string
          example:
            issueDate: "1581049918568"
            expToken: "10800000"
        payload:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: integer
                username:
                  type: string
                email:
                  type: string
              example:
                id: 1
                username: nocap
                email: nocap@gmail.com
            token:
              type: string
              example: TOKEN
    postResponse:
      description: success response for creating a post
      content:
        application/json:
          schema:
            type: object
            properties:
              meta:
                type: object
              payload:
                type: object
                properties:
                  post:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: "the title"
                      body:
                        type: string
                        example: "the body"
    unauthorized:
      description: User has no token or not login
    404ErrorResponse:
      description: Error
  # ! =============================== RESPONSE END ===============================
  parameters:
    idPath:
      in: path
      name: id
      description: ID of a resource
      required: true
      schema:
        type: integer
    offsetQuery:
      in: query
      name: offset
      description: number of rows to skip
      required: true
      schema:
        type: integer
    limitQuery:
      in: query
      name: limit
      description: number of rows to be returned
      required: true
      schema:
        type: integer
        default: 10
